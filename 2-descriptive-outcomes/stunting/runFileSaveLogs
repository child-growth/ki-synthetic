#!/usr/bin/env python3	
# Type "./runFileSaveLogs -h" for help


import os	
import sys	
import argparse	
import getpass	
import datetime	
import shutil	
import glob	
import pathlib	

print(os.getcwd())
print(os.path.dirname(__file__))

# Setting working directory to this script's current directory	
os.chdir(os.path.dirname(__file__))	

	

# Setting up argument parser	
parser = argparse.ArgumentParser(description='Runs the argument R script(s) - in parallel if specified - and moves the subsequent generated .Rout log files to a time-stamped, user-stamped, and optionally, identifier-stamped directory.')	

def is_valid_file(parser, arg):	
  if not os.path.exists(arg):	
    parser.error("The file %s does not exist!" % arg)	
  else:	
    return arg	

def is_valid_directory(parser, arg):	
  if not os.path.isdir(arg):	
    parser.error("The specified path (%s) is not a directory!" % arg)	
  else:	
    return arg	

parser.add_argument('-p', '--parallel', action='store_true', help="Runs the argument R scripts in parallel if specified")	
parser.add_argument("-l", "--logDirPrefix", help="The directory in which log files will be saved to.", default="/data/KI/ki-logs/", type=lambda logDirPrefix: is_valid_directory(parser, logDirPrefix))	
parser.add_argument("-i", "--identifier", help="Adds an identifier to the directory name where this is saved")	
parser.add_argument('filepaths', nargs='+', type=lambda filename: is_valid_file(parser, filename), help="The filepath(s) of the R scripts to be run")	

args = parser.parse_args()	


# Run given R Scripts	
for filename in args.filepaths:	
  print(filename)
  system_call = "R CMD BATCH" + " " + filename	
  if args.parallel:	
    system_call = "nohup" + " " + system_call + " &"	

  os.system(system_call)	
  


# Create the directory (and any parents) of the log files	
#currentUser = getpass.getuser()	
#currentTime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")	
#logDir = args.logDirPrefix + currentTime + "-" + currentUser	

#if args.identifier is not None:	
#  logDir += "-" + args.identifier	

#logDir += "/"	

#pathlib.Path(logDir).mkdir(parents=True, exist_ok=True)	


# Find and move all logs to this new directory	
#currentLogPaths = glob.glob('./*.Rout')	
#for currentLogPath in currentLogPaths:	
#  filename = currentLogPath.split("/")[-1]
#  shutil.move(currentLogPath, logDir + filename)
