
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##########################################
> # ki longitudinal manuscripts
> # co-occurrence analysis
> 
> # create indicators for newly stunted, 
> # recovered, relapsed, and never stunted
> ##########################################
> 
> #-----------------------------------------
> # Process data for stunting flow chart
> #-----------------------------------------
> rm(list=ls())
> source(paste0(here::here(), "/0-config.R"))
── Attaching packages ────────────────────────────────── tidyverse 1.3.0.9000 ──
✔ ggplot2 3.2.1     ✔ purrr   0.3.3
✔ tibble  2.1.3     ✔ dplyr   0.8.3
✔ tidyr   1.0.0     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.4.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
here() starts at /home/andrew.mertens/ki-longitudinal-manuscripts

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine


Attaching package: ‘reshape2’

The following object is masked from ‘package:tidyr’:

    smiths

Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loading 'metafor' package (version 2.1-0). For an overview 
and introduction to the package please type: help(metafor).

Attaching package: ‘data.table’

The following objects are masked from ‘package:reshape2’:

    dcast, melt

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose

Loading required package: viridisLite

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map


Attaching package: ‘ggridges’

The following object is masked from ‘package:ggplot2’:

    scale_discrete_manual


Attaching package: ‘assertthat’

The following object is masked from ‘package:tibble’:

    has_name

Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

This is mgcv 1.8-30. For overview type 'help("mgcv-package")'.

Attaching package: ‘lazyeval’

The following objects are masked from ‘package:purrr’:

    is_atomic, is_formula


Attaching package: ‘rlang’

The following objects are masked from ‘package:lazyeval’:

    as_name, call_modify, call_standardise, expr_label, expr_text,
    f_env, f_env<-, f_label, f_lhs, f_lhs<-, f_rhs, f_rhs<-, f_text,
    is_atomic, is_call, is_formula, is_lang, is_pairlist, missing_arg

The following object is masked from ‘package:assertthat’:

    has_name

The following object is masked from ‘package:data.table’:

    :=

The following objects are masked from ‘package:purrr’:

    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,
    flatten_lgl, flatten_raw, invoke, list_along, modify, prepend,
    splice


Attaching package: ‘scales’

The following object is masked from ‘package:viridis’:

    viridis_pal

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor


Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

Loading required package: bit
Attaching package bit
package:bit (c) 2008-2012 Jens Oehlschlaegel (GPL-2)
creators: bit bitwhich
coercion: as.logical as.integer as.bit as.bitwhich which
operator: ! & | xor != ==
querying: print length any all min max range sum summary
bit access: length<- [ [<- [[ [[<-
for more help type ?bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2012 Jens Oehlschlaegel
creators: integer64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bin
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following object is masked from ‘package:bit’:

    still.identical

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank


Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Warning message:
New theme missing the following elements: line, rect, text, axis.title.x, axis.title.x.top, axis.title.y, axis.title.y.right, axis.text, axis.text.x, axis.text.x.top, axis.text.y, axis.text.y.right, axis.ticks, axis.ticks.length, axis.ticks.length.x, axis.ticks.length.x.top, axis.ticks.length.x.bottom, axis.ticks.length.y, axis.ticks.length.y.left, axis.ticks.length.y.right, axis.line, axis.line.x, axis.line.y, legend.background, legend.margin, legend.spacing, legend.spacing.x, legend.spacing.y, legend.key, legend.key.size, legend.key.height, legend.key.width, legend.text, legend.text.align, legend.title, legend.title.align, legend.position, legend.direction, legend.justification, legend.box, legend.box.margin, legend.box.background, legend.box.spacing, panel.background, panel.border, panel.spacing, panel.spacing.x, panel.spacing.y, panel.grid, panel.grid.minor, panel.ontop, plot.background, plot.title, plot.subtitle, plot.caption, plot.tag, plot.tag.position, plot.margin, strip.backgr [... truncated] 
> 
> d <- readRDS(paste0(ghapdata_dir,"/co_occurrence_data.rds"))
> 
> d = d %>% ungroup() %>% mutate(studyid = as.character(studyid))
> 
> # since this will include recovery, 
> # subsetting to monthly cohorts
> d <- d %>% filter(measurefreq=="monthly")
> 
> # drop variables we don't need
> d = d %>% select(studyid, subjid, country, measid, agedays, haz, whz, waz)
> 
> 
> 
> # create reverse measid
> d = d %>% 
+   group_by(studyid, country, subjid) %>%
+   mutate(revmeasid = rev(seq_along(agedays)))
> 
> 
> ##########################################
> # Define indicators of faltering at each time point
> ##########################################
> 
> #Mark monthly  agecat
> d <- calc.monthly.agecat(d)
> d <- d %>% filter(!is.na(agecat))
> 
> #Number of children ever wasted and stunted
> d %>% mutate(co=ifelse(haz< (-2) & whz < (-2),1,0),
+              sevco=ifelse(haz< (-3) & whz < (-3),1,0)) %>% 
+   group_by(studyid, country, subjid) %>%
+   summarize(everco=max(co), eversevco=max(sevco)) %>% ungroup() %>%
+   summarize(N=n(), sumco=sum(everco), sumsevco=sum(eversevco), propco=mean(everco), propsevco=mean(eversevco))
# A tibble: 1 x 5
      N sumco sumsevco propco propsevco
  <int> <dbl>    <dbl>  <dbl>     <dbl>
1 10815  1532      237  0.142    0.0219
> 
> 
> 
> 
> 
> flow_m = d %>%
+   mutate(agem = round(agedays / 30.4167)) %>%
+   #Take mean of multiple obs within a month
+   group_by(studyid,country,subjid, agem) %>%
+   summarize(haz=mean(haz), whz=mean(whz), waz=mean(waz)) %>%
+   group_by(studyid,country,subjid) %>%
+   mutate(stunted=ifelse(haz< -2,1,0),
+          wasted=ifelse(whz< -2,1,0),
+          underwt=ifelse(waz< -2,1,0),
+          co=1*(wasted==1 & stunted==1),
+          su=1*(underwt==1 & stunted==1),
+          wu=1*(wasted==1 & underwt==1),
+          stunted=ifelse(co==1 | su==1 | wu==1, 0, stunted),
+          wasted=ifelse(co==1 | su==1 | wu==1, 0, wasted),
+          underwt=ifelse(co==1 | su==1 | wu==1, 0, underwt),
+          su=ifelse(co==1 , 0, su),
+          wu=ifelse(co==1 , 0, wu),
+          lagstunted=lag(stunted), lagstunted=ifelse(is.na(lagstunted),0,lagstunted),
+          lageverstunted = lag(cummax(stunted)), lageverstunted=ifelse(is.na(lageverstunted),0,lageverstunted),
+          lagwasted=lag(wasted), lagwasted=ifelse(is.na(lagwasted),0,lagwasted),
+          lageverwasted = lag(cummax(wasted)), lageverwasted=ifelse(is.na(lageverwasted),0,lageverwasted),
+          lagunderwt=lag(underwt), lagunderwt=ifelse(is.na(lagunderwt),0,lagunderwt),
+          lageverunderwt = lag(cummax(underwt)), lageverunderwt=ifelse(is.na(lageverunderwt),0,lageverunderwt),
+          lagsu=lag(su), lagsu=ifelse(is.na(lagsu),0,lagsu),
+          lageversu = lag(cummax(su)), lageversu=ifelse(is.na(lageversu),0,lageversu),
+          lagwu=lag(wu), lagwu=ifelse(is.na(lagwu),0,lagwu),
+          lageverwu= lag(cummax(wu)), lageverwu=ifelse(is.na(lageverwu),0,lageverwu),
+          lagco=lag(co), lagco=ifelse(is.na(lagco),0,lagco),
+          lageverco= lag(cummax(co)), lageverco=ifelse(is.na(lageverco),0,lageverco),
+          recovered=ifelse((lageverstunted==1 | lageverwasted==1 | lageverunderwt==1 | lageversu==1 | lageverwu==1 | lageverco==1) &
+                             (stunted==0 & wasted==0 & underwt==0 & co==0 & su==0 & wu==0), 1, 0),
+          healthy=ifelse((lageverstunted==0 & lageverwasted==0 & lageverunderwt==0 & lageversu==0 & lageverwu==0 & lageverco==0) &
+                             (stunted==0 & wasted==0 & underwt==0 & co==0 & su==0 & wu==0), 1, 0))
> 
> 
> 
> 
> 
> 
> # drop measurements with ages over 24 months
> flow_m = flow_m %>% filter(agem < 25) 
> 
> 
> 
> # check that indicators do not contain missing values
> assert_that(names(table(is.na(flow_m$stunted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$wasted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$underwt)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$co)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$su)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$wu)))=="FALSE")
[1] TRUE
> 
> # check for multiple categories
> flow_m = flow_m %>% mutate(sum = stunted+wasted+underwt+wu+su+co+recovered+healthy)
> assert_that(names(table(flow_m$sum))=="1")
[1] TRUE
> 
> 
> #Summary stats
> table(flow_m$wu)

     0      1 
155145   5301 
> 
> #Percent of wasted kids only wasted
> mean(sum(flow_m$wasted)/sum(flow_m$wasted, flow_m$wu, flow_m$co))
[1] 0.2222461
> #Also underweight
> mean(sum(flow_m$wu)/sum(flow_m$wasted, flow_m$wu, flow_m$co))
[1] 0.3791845
> #Also stunted + underweight
> mean(sum(flow_m$co)/sum(flow_m$wasted, flow_m$wu, flow_m$co))
[1] 0.3985694
> 
> #num children and observations
> flow_m %>% ungroup() %>% summarize(N=n(), nchild=length(unique(paste0(studyid, subjid))))
# A tibble: 1 x 2
       N nchild
   <int>  <int>
1 160446  10815
> flow_m %>% group_by(agem) %>% summarize(N=n(), nchild=length(unique(paste0(studyid, subjid)))) %>% as.data.frame()
   agem    N nchild
1     0 5379   5379
2     1 8221   8221
3     2 8652   8652
4     3 8532   8532
5     4 8587   8587
6     5 7208   7208
7     6 8382   8382
8     7 7475   7475
9     8 7164   7164
10    9 7553   7553
11   10 7433   7433
12   11 6246   6246
13   12 7559   7559
14   13 5688   5688
15   14 5502   5502
16   15 6966   6966
17   16 5152   5152
18   17 5026   5026
19   18 6643   6643
20   19 4868   4868
21   20 4030   4030
22   21 5604   5604
23   22 3918   3918
24   23 3623   3623
25   24 5035   5035
> 
> # Check that no child was classified in more
> # than one category at any time point
> summary = flow_m %>%
+   group_by(agem) %>%
+   summarise(
+     nchild=length(unique(subjid)),
+     N=n(),
+     stunted = mean(stunted, na.rm = TRUE),
+     wasted = mean(wasted, na.rm = TRUE),
+     underwt = mean(underwt, na.rm = TRUE),
+     wu = mean(wu, na.rm = TRUE),
+     su = mean(su, na.rm = TRUE),
+     co = mean(co, na.rm = TRUE),
+     recovered = mean(recovered, na.rm = TRUE),
+     healthy = mean(healthy, na.rm = TRUE))
> 
> summary = summary %>%
+   mutate(sum = stunted + wasted + underwt +
+            wu + su + co + recovered + healthy)
> 
> summary
# A tibble: 25 x 12
    agem nchild     N stunted wasted underwt     wu     su      co recovered
   <dbl>  <int> <int>   <dbl>  <dbl>   <dbl>  <dbl>  <dbl>   <dbl>     <dbl>
 1     0   3008  5379  0.0441 0.113   0.0206 0.0483 0.0390 0.0134     0     
 2     1   5304  8221  0.0676 0.0467  0.0236 0.0203 0.0659 0.00961    0.0788
 3     2   5588  8652  0.0876 0.0301  0.0288 0.0187 0.0683 0.00728    0.138 
 4     3   5560  8532  0.0886 0.0247  0.0307 0.0250 0.0661 0.00879    0.175 
 5     4   5564  8587  0.0928 0.0194  0.0240 0.0292 0.0639 0.0108     0.203 
 6     5   4852  7208  0.0950 0.0186  0.0290 0.0326 0.0728 0.0137     0.210 
 7     6   5401  8382  0.0974 0.0144  0.0290 0.0327 0.0749 0.0129     0.233 
 8     7   4653  7475  0.102  0.0144  0.0286 0.0344 0.0784 0.0202     0.246 
 9     8   4600  7164  0.104  0.0158  0.0272 0.0388 0.0857 0.0255     0.246 
10     9   4967  7553  0.111  0.0146  0.0261 0.0406 0.0915 0.0319     0.245 
# … with 15 more rows, and 2 more variables: healthy <dbl>, sum <dbl>
> 
> 
> # aggregate data within study, country, and agecat
> co_agg = flow_m %>%
+   ungroup() %>%
+   mutate(agem = as.factor(agem)) %>%
+   group_by(studyid, country, agem) %>%
+   summarise(
+     nchild=n(),
+     stunted = sum(stunted),
+     wasted = sum(wasted),
+     underwt = sum(underwt),
+     wu = sum(wu),
+     su = sum(su),
+     co = sum(co),
+     recovered = sum(recovered),
+     healthy = sum(healthy))  
> 
> # estimate random effects, format results
> pooled_stunt = run_rma_agem(data = co_agg, 
+                             n_name = "nchild", 
+                             x_name = "stunted", 
+                             label = "Stunted",
+                             method = "REML")
Warning message:
`as.tibble()` is deprecated, use `as_tibble()` (but mind the new semantics).
This warning is displayed once per session. 
> pooled_wast = run_rma_agem(data = co_agg, 
+                             n_name = "nchild", 
+                             x_name = "wasted", 
+                             label = "Wasted",
+                             method = "REML")
Error in rma(data = data, ni = data[[ni]], method = method, xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
Error in rma(data = data, ni = data[[ni]], method = "ML", xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
Error in rma(data = data, ni = data[[ni]], method = method, xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
Error in rma(data = data, ni = data[[ni]], method = method, xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
Error in rma(data = data, ni = data[[ni]], method = "ML", xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
> pooled_underwt = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "underwt", 
+                            label = "Underweight",
+                            method = "REML")
> pooled_wu = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "wu", 
+                            label = "Wasted+Underweight",
+                            method = "REML")
> pooled_su = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "su", 
+                            label = "Stunted+Underweight",
+                            method = "REML")
> pooled_co = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "co", 
+                            label = "Wasted+Stunted",
+                            method = "REML")
> pooled_healthy = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "healthy", 
+                            label = "Healthy",
+                            method = "REML")
> pooled_recovered = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "recovered", 
+                            label = "Recovered",
+                            method = "REML")
> 
> 
> 
> 
> co_pooled = bind_rows(pooled_stunt, pooled_wast, pooled_underwt, pooled_wu, pooled_su, pooled_co, pooled_healthy, pooled_recovered)
> 
> 
> #----------------------------------------------
> # setting estimates to 0 at birth for
> # still, previously, relapse stunted
> #----------------------------------------------
> 
> # identify which cells have 0's 
> stunted_0 = as.character(summary$agem[summary$stunted==0])
> wasted_0 =as.character(summary$agem[summary$wasted==0])
> underwt_0 = as.character(summary$agem[summary$underwt==0])
> wu_0 = as.character(summary$agem[summary$wu==0])
> su_0 = as.character(summary$agem[summary$su==0])
> co_0 = as.character(summary$agem[summary$co==0])
> recovered_0 = as.character(summary$agem[summary$recovered==0])
> healthy_0 = as.character(summary$agem[summary$healthy==0])
> 
> 
> 
> saveRDS(flow_m, file=paste0(res_dir, "co_flow.RDS"))
> saveRDS(co_pooled, file=paste0(res_dir, "co_flow_pooled.RDS"))
> 
> 
> 
> proc.time()
   user  system elapsed 
 28.597   4.571  46.078 
